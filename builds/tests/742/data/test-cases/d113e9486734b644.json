{"uid":"d113e9486734b644","name":"test_get_or_create_model_openai","fullName":"tests.test_llm.TestModelManagement#test_get_or_create_model_openai","historyId":"2a7078b91a4a0fd7aeee0befb4e56b3e","time":{"start":1754996427677,"stop":1754996427692,"duration":15},"status":"failed","statusMessage":"AssertionError: expected call not found.\nExpected: ChatOpenAI(model='gpt-5', openai_api_key='test_key', temperature=0.7)\n  Actual: ChatOpenAI(model='gpt-5', api_key='test_key', temperature=0.7)","statusTrace":"self = <test_llm.TestModelManagement object at 0x7f5c043793a0>\nrequest = <FixtureRequest for <Function test_get_or_create_model_openai>>\napproved_user = <CustomUser: testuser>\n\n    def test_get_or_create_model_openai(self, request, approved_user):\n        llm = Llm()\n        params = {\"model\": \"gpt-5\", \"user\": approved_user}\n    \n        mock_settings = {\"api_key\": \"test_key\", \"temperature\": 0.7}\n        with patch.object(Llm, \"get_model_settings\", return_value=mock_settings):\n            if request.config.getoption(\"--use-llm\"):\n                model = llm._get_or_create_model(params)\n                assert model is not None\n            else:\n                mock_chat = MagicMock()\n                with patch(\n                    \"lexiflux.language.llm.ChatOpenAI\", return_value=mock_chat\n                ) as mock_openai:\n                    model = llm._get_or_create_model(params)\n    \n                    # Verify the model was created with correct parameters\n>                   mock_openai.assert_called_once_with(\n                        model=\"gpt-5\", openai_api_key=\"test_key\", temperature=0.7\n                    )\n\ntests/test_llm.py:349: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/unittest/mock.py:961: in assert_called_once_with\n    return self.assert_called_with(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <MagicMock name='ChatOpenAI' id='140033161640944'>, args = ()\nkwargs = {'model': 'gpt-5', 'openai_api_key': 'test_key', 'temperature': 0.7}\nexpected = call(model='gpt-5', openai_api_key='test_key', temperature=0.7)\nactual = call(model='gpt-5', api_key='test_key', temperature=0.7)\n_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x7f5c034eb420>\ncause = None\n\n    def assert_called_with(self, /, *args, **kwargs):\n        \"\"\"assert that the last call was made with the specified arguments.\n    \n        Raises an AssertionError if the args and keyword args passed in are\n        different to the last call to the mock.\"\"\"\n        if self.call_args is None:\n            expected = self._format_mock_call_signature(args, kwargs)\n            actual = 'not called.'\n            error_message = ('expected call not found.\\nExpected: %s\\n  Actual: %s'\n                    % (expected, actual))\n            raise AssertionError(error_message)\n    \n        def _error_message():\n            msg = self._format_mock_failure_message(args, kwargs)\n            return msg\n        expected = self._call_matcher(_Call((args, kwargs), two=True))\n        actual = self._call_matcher(self.call_args)\n        if actual != expected:\n            cause = expected if isinstance(expected, Exception) else None\n>           raise AssertionError(_error_message()) from cause\nE           AssertionError: expected call not found.\nE           Expected: ChatOpenAI(model='gpt-5', openai_api_key='test_key', temperature=0.7)\nE             Actual: ChatOpenAI(model='gpt-5', api_key='test_key', temperature=0.7)\n\n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/unittest/mock.py:949: AssertionError","flaky":false,"newFailed":true,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1754996381642,"stop":1754996381731,"duration":89},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_fail_for_invalid_template_variable","time":{"start":1754996381731,"stop":1754996381731,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"use_non_threaded_server","time":{"start":1754996381732,"stop":1754996381732,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"django_test_environment","time":{"start":1754996381732,"stop":1754996381732,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"django_db_blocker","time":{"start":1754996381733,"stop":1754996381733,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"django_db_use_migrations","time":{"start":1754996381733,"stop":1754996381733,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"django_db_createdb","time":{"start":1754996381733,"stop":1754996381733,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"django_db_modify_db_settings_xdist_suffix","time":{"start":1754996381733,"stop":1754996381733,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"django_db_modify_db_settings_tox_suffix","time":{"start":1754996381733,"stop":1754996381733,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"django_db_keepdb","time":{"start":1754996381733,"stop":1754996381733,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"django_db_setup","time":{"start":1754996381734,"stop":1754996384136,"duration":2402},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"django_db_modify_db_settings_parallel_suffix","time":{"start":1754996381734,"stop":1754996381734,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"django_db_modify_db_settings","time":{"start":1754996381734,"stop":1754996381734,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_django_clear_site_cache","time":{"start":1754996427087,"stop":1754996427087,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_dj_autoclear_mailbox","time":{"start":1754996427087,"stop":1754996427087,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_django_setup_unittest","time":{"start":1754996427087,"stop":1754996427087,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_live_server_helper","time":{"start":1754996427088,"stop":1754996427088,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_django_db_marker","time":{"start":1754996427088,"stop":1754996427088,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"monkeypatch","time":{"start":1754996427088,"stop":1754996427088,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_template_string_if_invalid_marker","time":{"start":1754996427088,"stop":1754996427088,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"mock_detect_language","time":{"start":1754996427088,"stop":1754996427089,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_django_set_urlconf","time":{"start":1754996427088,"stop":1754996427088,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_django_db_helper","time":{"start":1754996427089,"stop":1754996427090,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"db_init","time":{"start":1754996427090,"stop":1754996427259,"duration":169},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"db","time":{"start":1754996427090,"stop":1754996427090,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"user","time":{"start":1754996427259,"stop":1754996427674,"duration":415},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"language","time":{"start":1754996427674,"stop":1754996427675,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"approved_user","time":{"start":1754996427675,"stop":1754996427676,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"failed","statusMessage":"AssertionError: expected call not found.\nExpected: ChatOpenAI(model='gpt-5', openai_api_key='test_key', temperature=0.7)\n  Actual: ChatOpenAI(model='gpt-5', api_key='test_key', temperature=0.7)","statusTrace":"self = <test_llm.TestModelManagement object at 0x7f5c043793a0>\nrequest = <FixtureRequest for <Function test_get_or_create_model_openai>>\napproved_user = <CustomUser: testuser>\n\n    def test_get_or_create_model_openai(self, request, approved_user):\n        llm = Llm()\n        params = {\"model\": \"gpt-5\", \"user\": approved_user}\n    \n        mock_settings = {\"api_key\": \"test_key\", \"temperature\": 0.7}\n        with patch.object(Llm, \"get_model_settings\", return_value=mock_settings):\n            if request.config.getoption(\"--use-llm\"):\n                model = llm._get_or_create_model(params)\n                assert model is not None\n            else:\n                mock_chat = MagicMock()\n                with patch(\n                    \"lexiflux.language.llm.ChatOpenAI\", return_value=mock_chat\n                ) as mock_openai:\n                    model = llm._get_or_create_model(params)\n    \n                    # Verify the model was created with correct parameters\n>                   mock_openai.assert_called_once_with(\n                        model=\"gpt-5\", openai_api_key=\"test_key\", temperature=0.7\n                    )\n\ntests/test_llm.py:349: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/unittest/mock.py:961: in assert_called_once_with\n    return self.assert_called_with(*args, **kwargs)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <MagicMock name='ChatOpenAI' id='140033161640944'>, args = ()\nkwargs = {'model': 'gpt-5', 'openai_api_key': 'test_key', 'temperature': 0.7}\nexpected = call(model='gpt-5', openai_api_key='test_key', temperature=0.7)\nactual = call(model='gpt-5', api_key='test_key', temperature=0.7)\n_error_message = <function NonCallableMock.assert_called_with.<locals>._error_message at 0x7f5c034eb420>\ncause = None\n\n    def assert_called_with(self, /, *args, **kwargs):\n        \"\"\"assert that the last call was made with the specified arguments.\n    \n        Raises an AssertionError if the args and keyword args passed in are\n        different to the last call to the mock.\"\"\"\n        if self.call_args is None:\n            expected = self._format_mock_call_signature(args, kwargs)\n            actual = 'not called.'\n            error_message = ('expected call not found.\\nExpected: %s\\n  Actual: %s'\n                    % (expected, actual))\n            raise AssertionError(error_message)\n    \n        def _error_message():\n            msg = self._format_mock_failure_message(args, kwargs)\n            return msg\n        expected = self._call_matcher(_Call((args, kwargs), two=True))\n        actual = self._call_matcher(self.call_args)\n        if actual != expected:\n            cause = expected if isinstance(expected, Exception) else None\n>           raise AssertionError(_error_message()) from cause\nE           AssertionError: expected call not found.\nE           Expected: ChatOpenAI(model='gpt-5', openai_api_key='test_key', temperature=0.7)\nE             Actual: ChatOpenAI(model='gpt-5', api_key='test_key', temperature=0.7)\n\n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/unittest/mock.py:949: AssertionError","steps":[],"attachments":[{"uid":"a6e3abb85b7aa7c6","name":"log","source":"a6e3abb85b7aa7c6.txt","type":"text/plain","size":213},{"uid":"27037794585a8cf9","name":"stderr","source":"27037794585a8cf9.txt","type":"text/plain","size":223}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":2,"stepsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"_django_db_helper::0","time":{"start":1754996427811,"stop":1754996427812,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"mock_detect_language::0","time":{"start":1754996427813,"stop":1754996427813,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_live_server_helper::0","time":{"start":1754996427814,"stop":1754996427814,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"monkeypatch::0","time":{"start":1754996427814,"stop":1754996427814,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_django_set_urlconf::0","time":{"start":1754996427815,"stop":1754996427815,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_django_setup_unittest::0","time":{"start":1754996428399,"stop":1754996428399,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"django_db_setup::0","time":{"start":1754996515460,"stop":1754996515461,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"use_non_threaded_server::0","time":{"start":1754996515484,"stop":1754996515484,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"django_test_environment::0","time":{"start":1754996515486,"stop":1754996515487,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_fail_for_invalid_template_variable::0","time":{"start":1754996515489,"stop":1754996515489,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"Model Management"},{"name":"epic","value":"Language Tools"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_llm"},{"name":"subSuite","value":"TestModelManagement"},{"name":"host","value":"pkrvmsl9tci6h6u"},{"name":"thread","value":"3816-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_llm"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":1,"broken":1,"skipped":0,"passed":242,"unknown":0,"total":244},"items":[{"uid":"ae8d391e057110bb","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/741/index.html#testresult/ae8d391e057110bb","status":"passed","time":{"start":1754990557006,"stop":1754990557029,"duration":23}},{"uid":"d9251d19870453c2","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/740/index.html#testresult/d9251d19870453c2","status":"passed","time":{"start":1754021565427,"stop":1754021565439,"duration":12}},{"uid":"e4abc633d0e87475","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/739/index.html#testresult/e4abc633d0e87475","status":"passed","time":{"start":1753974929236,"stop":1753974929248,"duration":12}},{"uid":"6adcaa136ec422c1","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/738/index.html#testresult/6adcaa136ec422c1","status":"passed","time":{"start":1753951022851,"stop":1753951022869,"duration":18}},{"uid":"f67b7ed0f9b9c7","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/737/index.html#testresult/f67b7ed0f9b9c7","status":"passed","time":{"start":1753849577134,"stop":1753849577145,"duration":11}},{"uid":"76b594b6afece5ed","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/736/index.html#testresult/76b594b6afece5ed","status":"passed","time":{"start":1753848183625,"stop":1753848183636,"duration":11}},{"uid":"6ef3d54516c6f739","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/735/index.html#testresult/6ef3d54516c6f739","status":"passed","time":{"start":1753771922124,"stop":1753771922138,"duration":14}},{"uid":"7fe14f4db9621720","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/734/index.html#testresult/7fe14f4db9621720","status":"passed","time":{"start":1753676200237,"stop":1753676200249,"duration":12}},{"uid":"7c75d8c3e30c9c70","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/733/index.html#testresult/7c75d8c3e30c9c70","status":"passed","time":{"start":1753623237032,"stop":1753623237044,"duration":12}},{"uid":"59247357585e8ddb","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/732/index.html#testresult/59247357585e8ddb","status":"passed","time":{"start":1753508690592,"stop":1753508690605,"duration":13}},{"uid":"db09b66ce2449ac6","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/731/index.html#testresult/db09b66ce2449ac6","status":"passed","time":{"start":1753369463683,"stop":1753369463694,"duration":11}},{"uid":"9c9cca924c153d7c","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/730/index.html#testresult/9c9cca924c153d7c","status":"passed","time":{"start":1750665556746,"stop":1750665556757,"duration":11}},{"uid":"95cf2d198da1161c","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/729/index.html#testresult/95cf2d198da1161c","status":"passed","time":{"start":1750588453109,"stop":1750588453120,"duration":11}},{"uid":"587c1096833733da","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/728/index.html#testresult/587c1096833733da","status":"passed","time":{"start":1750587829772,"stop":1750587829784,"duration":12}},{"uid":"24d15388cc690436","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/727/index.html#testresult/24d15388cc690436","status":"passed","time":{"start":1750518232006,"stop":1750518232017,"duration":11}},{"uid":"e983d2c7247f0779","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/726/index.html#testresult/e983d2c7247f0779","status":"passed","time":{"start":1750500964483,"stop":1750500964496,"duration":13}},{"uid":"c356f3614e77cffd","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/725/index.html#testresult/c356f3614e77cffd","status":"passed","time":{"start":1750499337222,"stop":1750499337234,"duration":12}},{"uid":"1be25863a94479e4","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/724/index.html#testresult/1be25863a94479e4","status":"passed","time":{"start":1750497250622,"stop":1750497250632,"duration":10}},{"uid":"9659c25764cdc4d1","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/723/index.html#testresult/9659c25764cdc4d1","status":"passed","time":{"start":1750047913544,"stop":1750047913553,"duration":9}},{"uid":"5dfea98957abcb0","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/722/index.html#testresult/5dfea98957abcb0","status":"passed","time":{"start":1750047407721,"stop":1750047407730,"duration":9}}]},"tags":[]},"source":"d113e9486734b644.json","parameterValues":[]}