{"uid":"5bfc68a77c7e9ee6","name":"test_generate_article_cached_invalid_article","fullName":"tests.test_llm.TestArticleGeneration#test_generate_article_cached_invalid_article","historyId":"f4b4a56f4fa9d2db515a07bc2875fdd0","time":{"start":1755058071207,"stop":1755058071211,"duration":4},"status":"failed","statusMessage":"AssertionError: Regex pattern did not match.\n Regex: \"Lexical article 'InvalidArticle' not found\"\n Input: \"AI insight 'InvalidArticle' not found.\"","statusTrace":"self = <test_llm.TestArticleGeneration object at 0x7f74ac92d040>\nllm_instance = <lexiflux.language.llm.Llm object at 0x7f74abdddc10>\napproved_user = <CustomUser: testuser>\n\n    def test_generate_article_cached_invalid_article(self, llm_instance, approved_user):\n        # Prepare test data\n        params = {\"model\": \"gpt-5\", \"user\": approved_user}\n        data = {\"text\": \"Sample text\", \"text_language\": \"en\", \"user_language\": \"fr\"}\n    \n        with pytest.raises(ValueError, match=\"Lexical article 'InvalidArticle' not found\"):\n>           llm_instance._generate_article_cached(\n                \"InvalidArticle\",\n                llm_instance.hashable_dict(params),\n                llm_instance.hashable_dict(data),\n            )\n\ntests/test_llm.py:523: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <lexiflux.language.llm.Llm object at 0x7f74abdddc10>\narticle_name = 'InvalidArticle'\nhashable_params = (('model', 'gpt-5'), ('user', <CustomUser: testuser>))\nhashable_data = (('text', 'Sample text'), ('text_language', 'en'), ('user_language', 'fr'))\n\n    @lru_cache(maxsize=1000)\n    def _generate_article_cached(\n        self,\n        article_name: str,\n        hashable_params: tuple[tuple[str, Any]],\n        hashable_data: tuple[tuple[str, Any]],\n    ) -> str:\n        \"\"\"Cached get article.\"\"\"\n        params = dict(hashable_params)\n        data = dict(hashable_data)\n        data[\"article_name\"] = article_name\n    \n        if article_name not in self._article_pipelines_factory:\n>           raise ValueError(f\"AI insight '{article_name}' not found.\")\nE           ValueError: AI insight 'InvalidArticle' not found.\n\nlexiflux/language/llm.py:248: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_llm.TestArticleGeneration object at 0x7f74ac92d040>\nllm_instance = <lexiflux.language.llm.Llm object at 0x7f74abdddc10>\napproved_user = <CustomUser: testuser>\n\n    def test_generate_article_cached_invalid_article(self, llm_instance, approved_user):\n        # Prepare test data\n        params = {\"model\": \"gpt-5\", \"user\": approved_user}\n        data = {\"text\": \"Sample text\", \"text_language\": \"en\", \"user_language\": \"fr\"}\n    \n>       with pytest.raises(ValueError, match=\"Lexical article 'InvalidArticle' not found\"):\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError: Regex pattern did not match.\nE        Regex: \"Lexical article 'InvalidArticle' not found\"\nE        Input: \"AI insight 'InvalidArticle' not found.\"\n\ntests/test_llm.py:522: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1755058019836,"stop":1755058019919,"duration":83},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"_fail_for_invalid_template_variable","time":{"start":1755058019919,"stop":1755058019919,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"use_non_threaded_server","time":{"start":1755058019920,"stop":1755058019920,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"django_test_environment","time":{"start":1755058019920,"stop":1755058019920,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"django_db_modify_db_settings_tox_suffix","time":{"start":1755058019921,"stop":1755058019921,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"django_db_keepdb","time":{"start":1755058019921,"stop":1755058019921,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"django_db_modify_db_settings_xdist_suffix","time":{"start":1755058019921,"stop":1755058019921,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"django_db_createdb","time":{"start":1755058019921,"stop":1755058019921,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"django_db_blocker","time":{"start":1755058019921,"stop":1755058019921,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"django_db_use_migrations","time":{"start":1755058019921,"stop":1755058019921,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"django_db_modify_db_settings","time":{"start":1755058019922,"stop":1755058019922,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"django_db_setup","time":{"start":1755058019922,"stop":1755058022315,"duration":2393},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"django_db_modify_db_settings_parallel_suffix","time":{"start":1755058019922,"stop":1755058019922,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"_django_setup_unittest","time":{"start":1755058066384,"stop":1755058066384,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"_dj_autoclear_mailbox","time":{"start":1755058070600,"stop":1755058070600,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"_django_clear_site_cache","time":{"start":1755058070600,"stop":1755058070600,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"_django_db_marker","time":{"start":1755058070600,"stop":1755058070600,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"_live_server_helper","time":{"start":1755058070600,"stop":1755058070601,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"_django_set_urlconf","time":{"start":1755058070600,"stop":1755058070600,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"_template_string_if_invalid_marker","time":{"start":1755058070601,"stop":1755058070601,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"monkeypatch","time":{"start":1755058070601,"stop":1755058070601,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"mock_detect_language","time":{"start":1755058070601,"stop":1755058070602,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"llm_instance","time":{"start":1755058070602,"stop":1755058070613,"duration":11},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"_django_db_helper","time":{"start":1755058070614,"stop":1755058070614,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"db_init","time":{"start":1755058070614,"stop":1755058070728,"duration":114},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"db","time":{"start":1755058070614,"stop":1755058070614,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"user","time":{"start":1755058070729,"stop":1755058071203,"duration":474},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"language","time":{"start":1755058071203,"stop":1755058071204,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"approved_user","time":{"start":1755058071204,"stop":1755058071205,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: Regex pattern did not match.\n Regex: \"Lexical article 'InvalidArticle' not found\"\n Input: \"AI insight 'InvalidArticle' not found.\"","statusTrace":"self = <test_llm.TestArticleGeneration object at 0x7f74ac92d040>\nllm_instance = <lexiflux.language.llm.Llm object at 0x7f74abdddc10>\napproved_user = <CustomUser: testuser>\n\n    def test_generate_article_cached_invalid_article(self, llm_instance, approved_user):\n        # Prepare test data\n        params = {\"model\": \"gpt-5\", \"user\": approved_user}\n        data = {\"text\": \"Sample text\", \"text_language\": \"en\", \"user_language\": \"fr\"}\n    \n        with pytest.raises(ValueError, match=\"Lexical article 'InvalidArticle' not found\"):\n>           llm_instance._generate_article_cached(\n                \"InvalidArticle\",\n                llm_instance.hashable_dict(params),\n                llm_instance.hashable_dict(data),\n            )\n\ntests/test_llm.py:523: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <lexiflux.language.llm.Llm object at 0x7f74abdddc10>\narticle_name = 'InvalidArticle'\nhashable_params = (('model', 'gpt-5'), ('user', <CustomUser: testuser>))\nhashable_data = (('text', 'Sample text'), ('text_language', 'en'), ('user_language', 'fr'))\n\n    @lru_cache(maxsize=1000)\n    def _generate_article_cached(\n        self,\n        article_name: str,\n        hashable_params: tuple[tuple[str, Any]],\n        hashable_data: tuple[tuple[str, Any]],\n    ) -> str:\n        \"\"\"Cached get article.\"\"\"\n        params = dict(hashable_params)\n        data = dict(hashable_data)\n        data[\"article_name\"] = article_name\n    \n        if article_name not in self._article_pipelines_factory:\n>           raise ValueError(f\"AI insight '{article_name}' not found.\")\nE           ValueError: AI insight 'InvalidArticle' not found.\n\nlexiflux/language/llm.py:248: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <test_llm.TestArticleGeneration object at 0x7f74ac92d040>\nllm_instance = <lexiflux.language.llm.Llm object at 0x7f74abdddc10>\napproved_user = <CustomUser: testuser>\n\n    def test_generate_article_cached_invalid_article(self, llm_instance, approved_user):\n        # Prepare test data\n        params = {\"model\": \"gpt-5\", \"user\": approved_user}\n        data = {\"text\": \"Sample text\", \"text_language\": \"en\", \"user_language\": \"fr\"}\n    \n>       with pytest.raises(ValueError, match=\"Lexical article 'InvalidArticle' not found\"):\n             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nE       AssertionError: Regex pattern did not match.\nE        Regex: \"Lexical article 'InvalidArticle' not found\"\nE        Input: \"AI insight 'InvalidArticle' not found.\"\n\ntests/test_llm.py:522: AssertionError","steps":[],"attachments":[{"uid":"5ef2a09402714f53","name":"log","source":"5ef2a09402714f53.txt","type":"text/plain","size":213},{"uid":"92768e952862904b","name":"stderr","source":"92768e952862904b.txt","type":"text/plain","size":223}],"parameters":[],"hasContent":true,"attachmentStep":false,"shouldDisplayMessage":true,"attachmentsCount":2,"stepsCount":0},"afterStages":[{"name":"_django_db_helper::0","time":{"start":1755058071528,"stop":1755058071529,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"mock_detect_language::0","time":{"start":1755058071530,"stop":1755058071530,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"_live_server_helper::0","time":{"start":1755058071532,"stop":1755058071532,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"monkeypatch::0","time":{"start":1755058071532,"stop":1755058071532,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"_django_set_urlconf::0","time":{"start":1755058071533,"stop":1755058071533,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"_django_setup_unittest::0","time":{"start":1755058072747,"stop":1755058072747,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"django_db_setup::0","time":{"start":1755058155445,"stop":1755058155445,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"use_non_threaded_server::0","time":{"start":1755058155469,"stop":1755058155469,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"django_test_environment::0","time":{"start":1755058155471,"stop":1755058155471,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0},{"name":"_fail_for_invalid_template_variable::0","time":{"start":1755058155473,"stop":1755058155473,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"attachmentStep":false,"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0}],"labels":[{"name":"feature","value":"Article Generation"},{"name":"epic","value":"Language Tools"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_llm"},{"name":"subSuite","value":"TestArticleGeneration"},{"name":"host","value":"pkrvmsl9tci6h6u"},{"name":"thread","value":"3819-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_llm"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":2,"broken":1,"skipped":0,"passed":245,"unknown":0,"total":248},"items":[{"uid":"62ec165a9996c54a","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/746/index.html#testresult/62ec165a9996c54a","status":"failed","statusDetails":"AssertionError: Regex pattern did not match.\n Regex: \"Lexical article 'InvalidArticle' not found\"\n Input: \"AI insight 'InvalidArticle' not found.\"","time":{"start":1755002957073,"stop":1755002957076,"duration":3}},{"uid":"46cbe9f69053960a","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/745/index.html#testresult/46cbe9f69053960a","status":"passed","time":{"start":1755000418800,"stop":1755000418802,"duration":2}},{"uid":"14c3d409c5e67168","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/744/index.html#testresult/14c3d409c5e67168","status":"passed","time":{"start":1754999110172,"stop":1754999110175,"duration":3}},{"uid":"7f61cb293764a3f2","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/743/index.html#testresult/7f61cb293764a3f2","status":"passed","time":{"start":1754998203285,"stop":1754998203288,"duration":3}},{"uid":"1503c03dff2e4c23","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/742/index.html#testresult/1503c03dff2e4c23","status":"passed","time":{"start":1754996432825,"stop":1754996432828,"duration":3}},{"uid":"508d6ff2e1201c61","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/741/index.html#testresult/508d6ff2e1201c61","status":"passed","time":{"start":1754990562350,"stop":1754990562353,"duration":3}},{"uid":"404ea6f34bd9c9a3","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/740/index.html#testresult/404ea6f34bd9c9a3","status":"passed","time":{"start":1754021570780,"stop":1754021570782,"duration":2}},{"uid":"8626a4c3d5fb3ea8","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/739/index.html#testresult/8626a4c3d5fb3ea8","status":"passed","time":{"start":1753974934450,"stop":1753974934452,"duration":2}},{"uid":"a8b3ac1384d5a2e9","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/738/index.html#testresult/a8b3ac1384d5a2e9","status":"passed","time":{"start":1753951028099,"stop":1753951028101,"duration":2}},{"uid":"e195e28407915e0d","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/737/index.html#testresult/e195e28407915e0d","status":"passed","time":{"start":1753849582258,"stop":1753849582261,"duration":3}},{"uid":"10c903638a98aba4","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/736/index.html#testresult/10c903638a98aba4","status":"passed","time":{"start":1753848188844,"stop":1753848188847,"duration":3}},{"uid":"542b081a7b1131ae","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/735/index.html#testresult/542b081a7b1131ae","status":"passed","time":{"start":1753771927383,"stop":1753771927385,"duration":2}},{"uid":"96f8fc9e8afce840","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/734/index.html#testresult/96f8fc9e8afce840","status":"passed","time":{"start":1753676205439,"stop":1753676205442,"duration":3}},{"uid":"28c081f56c10ff41","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/733/index.html#testresult/28c081f56c10ff41","status":"passed","time":{"start":1753623242200,"stop":1753623242203,"duration":3}},{"uid":"6b9236fa95071149","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/732/index.html#testresult/6b9236fa95071149","status":"passed","time":{"start":1753508695482,"stop":1753508695484,"duration":2}},{"uid":"7d2b714c7b5de92b","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/731/index.html#testresult/7d2b714c7b5de92b","status":"passed","time":{"start":1753369468995,"stop":1753369468997,"duration":2}},{"uid":"4d26a23491b8d01c","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/730/index.html#testresult/4d26a23491b8d01c","status":"passed","time":{"start":1750665561616,"stop":1750665561620,"duration":4}},{"uid":"ce15b0cf8e762f3","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/729/index.html#testresult/ce15b0cf8e762f3","status":"passed","time":{"start":1750588458090,"stop":1750588458092,"duration":2}},{"uid":"e6941a1e3a6203cf","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/728/index.html#testresult/e6941a1e3a6203cf","status":"passed","time":{"start":1750587834655,"stop":1750587834657,"duration":2}},{"uid":"a3576018b135709d","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/727/index.html#testresult/a3576018b135709d","status":"passed","time":{"start":1750518236968,"stop":1750518236970,"duration":2}}]},"tags":[]},"source":"5bfc68a77c7e9ee6.json","parameterValues":[]}