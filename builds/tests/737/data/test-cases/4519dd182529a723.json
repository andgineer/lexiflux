{"uid":"4519dd182529a723","name":"test_import_book_from_url_with_aggressive_cleaning","fullName":"tests.test_book_url_import#test_import_book_from_url_with_aggressive_cleaning","historyId":"7c393f13491876f1518a5901a2e477b4","time":{"start":1753849659162,"stop":1753849659168,"duration":6},"description":"Test URL import with aggressive cleaning level.","descriptionHtml":"<p>Test URL import with aggressive cleaning level.</p>\n","status":"broken","statusMessage":"AttributeError: Mock object has no attribute 'META'","statusTrace":"request = <MagicMock spec='HttpRequest' id='140173372713888'>\n\n    @smart_login_required\n    @require_POST  # type: ignore\n    def import_book(request: HttpRequest) -> HttpResponse:\n        \"\"\"Handle book import and return appropriate modal.\"\"\"\n        try:\n            import_type = request.POST.get(\"importType\", \"file\")\n    \n            if import_type == \"file\":\n                book = import_file(request)\n            elif import_type == \"url\":\n                book = import_url(request)\n            elif import_type == \"paste\":\n                book = import_clipboard(request)\n            else:\n                raise ValueError(f\"Unknown import type: {import_type}\")\n    \n            context = {\n                \"book\": book,\n                \"languages\": Language.objects.all(),\n                \"require_delete_confirmation\": False,\n                \"show_delete_button\": True,\n                \"skip_auth\": settings.lexiflux.skip_auth,\n            }\n            return HttpResponse(f\"\"\"\n                <script>\n                    document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());\n                    htmx.trigger('body', 'show-edit-modal');\n                </script>\n>               {render(request, \"partials/book_modal.html\", context).content.decode(\"utf-8\")}\n            \"\"\")\n\nlexiflux/views/import_views.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.12/site-packages/django/shortcuts.py:25: in render\n    content = loader.render_to_string(template_name, context, request, using=using)\n.venv/lib/python3.12/site-packages/django/template/loader.py:62: in render_to_string\n    return template.render(context, request)\n.venv/lib/python3.12/site-packages/django/template/backends/django.py:107: in render\n    return self.template.render(context)\n.venv/lib/python3.12/site-packages/django/template/base.py:171: in render\n    return self._render(context)\n.venv/lib/python3.12/site-packages/django/test/utils.py:114: in instrumented_test_render\n    return self.nodelist.render(context)\n.venv/lib/python3.12/site-packages/django/template/base.py:1016: in render\n    return SafeString(\"\".join([node.render_annotated(context) for node in self]))\n.venv/lib/python3.12/site-packages/django/template/base.py:977: in render_annotated\n    return self.render(context)\n.venv/lib/python3.12/site-packages/django/template/defaulttags.py:480: in render\n    url = reverse(view_name, args=args, kwargs=kwargs, current_app=current_app)\n.venv/lib/python3.12/site-packages/django/urls/base.py:98: in reverse\n    resolved_url = resolver._reverse_with_prefix(view, prefix, *args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <URLResolver 'lexiflux.urls' (None:None) '^/'>\nlookup_view = 'edit_book_modal', _prefix = '/'\nargs = (<MagicMock name='BookLoaderURL().create().__getitem__()' id='140173397966768'>,)\nkwargs = {}\npossibilities = [([('modals/edit-book/%(book_id)s/', ['book_id'])], 'modals/edit\\\\-book/(?P<book_id>[0-9]+)/\\\\Z', {}, {'book_id': <django.urls.converters.IntConverter object at 0x7f7cc50755e0>})]\npossibility = [('modals/edit-book/%(book_id)s/', ['book_id'])]\npattern = 'modals/edit\\\\-book/(?P<book_id>[0-9]+)/\\\\Z', defaults = {}\nconverters = {'book_id': <django.urls.converters.IntConverter object at 0x7f7cc50755e0>}\nresult = 'modals/edit-book/%(book_id)s/', params = ['book_id']\ncandidate_subs = {'book_id': <MagicMock name='BookLoaderURL().create().__getitem__()' id='140173397966768'>}\nk = 'book_id'\n\n    def _reverse_with_prefix(self, lookup_view, _prefix, *args, **kwargs):\n        if args and kwargs:\n            raise ValueError(\"Don't mix *args and **kwargs in call to reverse()!\")\n    \n        if not self._populated:\n            self._populate()\n    \n        possibilities = self.reverse_dict.getlist(lookup_view)\n    \n        for possibility, pattern, defaults, converters in possibilities:\n            for result, params in possibility:\n                if args:\n                    if len(args) != len(params):\n                        continue\n                    candidate_subs = dict(zip(params, args))\n                else:\n                    if set(kwargs).symmetric_difference(params).difference(defaults):\n                        continue\n                    matches = True\n                    for k, v in defaults.items():\n                        if k in params:\n                            continue\n                        if kwargs.get(k, v) != v:\n                            matches = False\n                            break\n                    if not matches:\n                        continue\n                    candidate_subs = kwargs\n                # Convert the candidate subs to text using Converter.to_url().\n                text_candidate_subs = {}\n                match = True\n                for k, v in candidate_subs.items():\n                    if k in converters:\n                        try:\n                            text_candidate_subs[k] = converters[k].to_url(v)\n                        except ValueError:\n                            match = False\n                            break\n                    else:\n                        text_candidate_subs[k] = str(v)\n                if not match:\n                    continue\n                # WSGI provides decoded URLs, without %xx escapes, and the URL\n                # resolver operates on such URLs. First substitute arguments\n                # without quoting to build a decoded URL and look for a match.\n                # Then, if we have a match, redo the substitution with quoted\n                # arguments in order to return a properly encoded URL.\n                candidate_pat = _prefix.replace(\"%\", \"%%\") + result\n                if re.search(\n                    \"^%s%s\" % (re.escape(_prefix), pattern),\n                    candidate_pat % text_candidate_subs,\n                ):\n                    # safe characters from `pchar` definition of RFC 3986\n                    url = quote(\n                        candidate_pat % text_candidate_subs,\n                        safe=RFC3986_SUBDELIMS + \"/~:@\",\n                    )\n                    # Don't allow construction of scheme relative urls.\n                    return escape_leading_slashes(url)\n        # lookup_view can be URL name or callable, but callables are not\n        # friendly in error messages.\n        m = getattr(lookup_view, \"__module__\", None)\n        n = getattr(lookup_view, \"__name__\", None)\n        if m is not None and n is not None:\n            lookup_view_s = \"%s.%s\" % (m, n)\n        else:\n            lookup_view_s = lookup_view\n    \n        patterns = [pattern for (_, pattern, _, _) in possibilities]\n        if patterns:\n            if args:\n                arg_msg = \"arguments '%s'\" % (args,)\n            elif kwargs:\n                arg_msg = \"keyword arguments '%s'\" % kwargs\n            else:\n                arg_msg = \"no arguments\"\n            msg = \"Reverse for '%s' with %s not found. %d pattern(s) tried: %s\" % (\n                lookup_view_s,\n                arg_msg,\n                len(patterns),\n                patterns,\n            )\n        else:\n            msg = (\n                \"Reverse for '%(view)s' not found. '%(view)s' is not \"\n                \"a valid view function or pattern name.\" % {\"view\": lookup_view_s}\n            )\n>       raise NoReverseMatch(msg)\nE       django.urls.exceptions.NoReverseMatch: Reverse for 'edit_book_modal' with arguments '(<MagicMock name='BookLoaderURL().create().__getitem__()' id='140173397966768'>,)' not found. 1 pattern(s) tried: ['modals/edit\\\\-book/(?P<book_id>[0-9]+)/\\\\Z']\n\n.venv/lib/python3.12/site-packages/django/urls/resolvers.py:831: NoReverseMatch\n\nDuring handling of the above exception, another exception occurred:\n\nmock_book_loader_url = <MagicMock name='BookLoaderURL' id='140173372983968'>\n\n    @allure.epic(\"Book import\")\n    @allure.feature(\"URL import: import_book view\")\n    @patch(\"lexiflux.views.import_views.BookLoaderURL\")\n    def test_import_book_from_url_with_aggressive_cleaning(mock_book_loader_url):\n        \"\"\"Test URL import with aggressive cleaning level.\"\"\"\n        request = MagicMock(spec=HttpRequest)\n        request.method = \"POST\"  # Add method attribute for require_POST decorator\n        request.user = MagicMock()\n        request.user.email = \"test@example.com\"\n        request.POST = {\n            \"importType\": \"url\",\n            \"url\": \"https://example.com/book\",\n            \"cleaning_level\": \"aggressive\",\n        }\n    \n        mock_book = MagicMock()\n        mock_book_instance = MagicMock()\n        mock_book_instance.create.return_value = mock_book\n        mock_book_loader_url.return_value = mock_book_instance\n    \n        with (\n            patch(\"lexiflux.views.library_views.render\"),\n            patch(\"lexiflux.decorators.login_required\", lambda f: f),\n        ):  # Bypass decorator\n>           import_book(request)\n\ntests/test_book_url_import.py:732: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlexiflux/decorators.py:44: in wrapper\n    return login_required(view_func)(request, *args, **kwargs)\n.venv/lib/python3.12/site-packages/django/views/decorators/http.py:64: in inner\n    return func(request, *args, **kwargs)\nlexiflux/views/import_views.py:84: in import_book\n    return render(request, \"partials/import_modal.html\", context)\n.venv/lib/python3.12/site-packages/django/shortcuts.py:25: in render\n    content = loader.render_to_string(template_name, context, request, using=using)\n.venv/lib/python3.12/site-packages/django/template/loader.py:62: in render_to_string\n    return template.render(context, request)\n.venv/lib/python3.12/site-packages/django/template/backends/django.py:107: in render\n    return self.template.render(context)\n.venv/lib/python3.12/site-packages/django/template/base.py:171: in render\n    return self._render(context)\n.venv/lib/python3.12/site-packages/django/test/utils.py:114: in instrumented_test_render\n    return self.nodelist.render(context)\n.venv/lib/python3.12/site-packages/django/template/base.py:1016: in render\n    return SafeString(\"\".join([node.render_annotated(context) for node in self]))\n.venv/lib/python3.12/site-packages/django/template/base.py:977: in render_annotated\n    return self.render(context)\n.venv/lib/python3.12/site-packages/django/template/defaulttags.py:75: in render\n    if csrf_token:\n.venv/lib/python3.12/site-packages/django/utils/functional.py:251: in inner\n    self._setup()\n.venv/lib/python3.12/site-packages/django/utils/functional.py:404: in _setup\n    self._wrapped = self._setupfunc()\n.venv/lib/python3.12/site-packages/django/template/context_processors.py:24: in _get_val\n    token = get_token(request)\n.venv/lib/python3.12/site-packages/django/middleware/csrf.py:106: in get_token\n    if \"CSRF_COOKIE\" in request.META:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <MagicMock spec='HttpRequest' id='140173372713888'>, name = 'META'\n\n    def __getattr__(self, name):\n        if name in {'_mock_methods', '_mock_unsafe'}:\n            raise AttributeError(name)\n        elif self._mock_methods is not None:\n            if name not in self._mock_methods or name in _all_magics:\n>               raise AttributeError(\"Mock object has no attribute %r\" % name)\nE               AttributeError: Mock object has no attribute 'META'\n\n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/unittest/mock.py:660: AttributeError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_session_faker","time":{"start":1753849531882,"stop":1753849531963,"duration":81},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_fail_for_invalid_template_variable","time":{"start":1753849531963,"stop":1753849531964,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"django_test_environment","time":{"start":1753849531964,"stop":1753849531964,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"django_db_blocker","time":{"start":1753849531965,"stop":1753849531965,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"use_non_threaded_server","time":{"start":1753849531965,"stop":1753849531965,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_django_setup_unittest","time":{"start":1753849659159,"stop":1753849659159,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_dj_autoclear_mailbox","time":{"start":1753849659159,"stop":1753849659159,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_django_clear_site_cache","time":{"start":1753849659160,"stop":1753849659160,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"mock_detect_language","time":{"start":1753849659160,"stop":1753849659161,"duration":1},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"monkeypatch","time":{"start":1753849659160,"stop":1753849659160,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_django_set_urlconf","time":{"start":1753849659160,"stop":1753849659160,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_template_string_if_invalid_marker","time":{"start":1753849659160,"stop":1753849659160,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_django_db_marker","time":{"start":1753849659160,"stop":1753849659160,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_live_server_helper","time":{"start":1753849659160,"stop":1753849659160,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"description":"Test URL import with aggressive cleaning level.","status":"broken","statusMessage":"AttributeError: Mock object has no attribute 'META'","statusTrace":"request = <MagicMock spec='HttpRequest' id='140173372713888'>\n\n    @smart_login_required\n    @require_POST  # type: ignore\n    def import_book(request: HttpRequest) -> HttpResponse:\n        \"\"\"Handle book import and return appropriate modal.\"\"\"\n        try:\n            import_type = request.POST.get(\"importType\", \"file\")\n    \n            if import_type == \"file\":\n                book = import_file(request)\n            elif import_type == \"url\":\n                book = import_url(request)\n            elif import_type == \"paste\":\n                book = import_clipboard(request)\n            else:\n                raise ValueError(f\"Unknown import type: {import_type}\")\n    \n            context = {\n                \"book\": book,\n                \"languages\": Language.objects.all(),\n                \"require_delete_confirmation\": False,\n                \"show_delete_button\": True,\n                \"skip_auth\": settings.lexiflux.skip_auth,\n            }\n            return HttpResponse(f\"\"\"\n                <script>\n                    document.querySelectorAll('.modal-backdrop').forEach(el => el.remove());\n                    htmx.trigger('body', 'show-edit-modal');\n                </script>\n>               {render(request, \"partials/book_modal.html\", context).content.decode(\"utf-8\")}\n            \"\"\")\n\nlexiflux/views/import_views.py:63: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n.venv/lib/python3.12/site-packages/django/shortcuts.py:25: in render\n    content = loader.render_to_string(template_name, context, request, using=using)\n.venv/lib/python3.12/site-packages/django/template/loader.py:62: in render_to_string\n    return template.render(context, request)\n.venv/lib/python3.12/site-packages/django/template/backends/django.py:107: in render\n    return self.template.render(context)\n.venv/lib/python3.12/site-packages/django/template/base.py:171: in render\n    return self._render(context)\n.venv/lib/python3.12/site-packages/django/test/utils.py:114: in instrumented_test_render\n    return self.nodelist.render(context)\n.venv/lib/python3.12/site-packages/django/template/base.py:1016: in render\n    return SafeString(\"\".join([node.render_annotated(context) for node in self]))\n.venv/lib/python3.12/site-packages/django/template/base.py:977: in render_annotated\n    return self.render(context)\n.venv/lib/python3.12/site-packages/django/template/defaulttags.py:480: in render\n    url = reverse(view_name, args=args, kwargs=kwargs, current_app=current_app)\n.venv/lib/python3.12/site-packages/django/urls/base.py:98: in reverse\n    resolved_url = resolver._reverse_with_prefix(view, prefix, *args, **kwargs)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <URLResolver 'lexiflux.urls' (None:None) '^/'>\nlookup_view = 'edit_book_modal', _prefix = '/'\nargs = (<MagicMock name='BookLoaderURL().create().__getitem__()' id='140173397966768'>,)\nkwargs = {}\npossibilities = [([('modals/edit-book/%(book_id)s/', ['book_id'])], 'modals/edit\\\\-book/(?P<book_id>[0-9]+)/\\\\Z', {}, {'book_id': <django.urls.converters.IntConverter object at 0x7f7cc50755e0>})]\npossibility = [('modals/edit-book/%(book_id)s/', ['book_id'])]\npattern = 'modals/edit\\\\-book/(?P<book_id>[0-9]+)/\\\\Z', defaults = {}\nconverters = {'book_id': <django.urls.converters.IntConverter object at 0x7f7cc50755e0>}\nresult = 'modals/edit-book/%(book_id)s/', params = ['book_id']\ncandidate_subs = {'book_id': <MagicMock name='BookLoaderURL().create().__getitem__()' id='140173397966768'>}\nk = 'book_id'\n\n    def _reverse_with_prefix(self, lookup_view, _prefix, *args, **kwargs):\n        if args and kwargs:\n            raise ValueError(\"Don't mix *args and **kwargs in call to reverse()!\")\n    \n        if not self._populated:\n            self._populate()\n    \n        possibilities = self.reverse_dict.getlist(lookup_view)\n    \n        for possibility, pattern, defaults, converters in possibilities:\n            for result, params in possibility:\n                if args:\n                    if len(args) != len(params):\n                        continue\n                    candidate_subs = dict(zip(params, args))\n                else:\n                    if set(kwargs).symmetric_difference(params).difference(defaults):\n                        continue\n                    matches = True\n                    for k, v in defaults.items():\n                        if k in params:\n                            continue\n                        if kwargs.get(k, v) != v:\n                            matches = False\n                            break\n                    if not matches:\n                        continue\n                    candidate_subs = kwargs\n                # Convert the candidate subs to text using Converter.to_url().\n                text_candidate_subs = {}\n                match = True\n                for k, v in candidate_subs.items():\n                    if k in converters:\n                        try:\n                            text_candidate_subs[k] = converters[k].to_url(v)\n                        except ValueError:\n                            match = False\n                            break\n                    else:\n                        text_candidate_subs[k] = str(v)\n                if not match:\n                    continue\n                # WSGI provides decoded URLs, without %xx escapes, and the URL\n                # resolver operates on such URLs. First substitute arguments\n                # without quoting to build a decoded URL and look for a match.\n                # Then, if we have a match, redo the substitution with quoted\n                # arguments in order to return a properly encoded URL.\n                candidate_pat = _prefix.replace(\"%\", \"%%\") + result\n                if re.search(\n                    \"^%s%s\" % (re.escape(_prefix), pattern),\n                    candidate_pat % text_candidate_subs,\n                ):\n                    # safe characters from `pchar` definition of RFC 3986\n                    url = quote(\n                        candidate_pat % text_candidate_subs,\n                        safe=RFC3986_SUBDELIMS + \"/~:@\",\n                    )\n                    # Don't allow construction of scheme relative urls.\n                    return escape_leading_slashes(url)\n        # lookup_view can be URL name or callable, but callables are not\n        # friendly in error messages.\n        m = getattr(lookup_view, \"__module__\", None)\n        n = getattr(lookup_view, \"__name__\", None)\n        if m is not None and n is not None:\n            lookup_view_s = \"%s.%s\" % (m, n)\n        else:\n            lookup_view_s = lookup_view\n    \n        patterns = [pattern for (_, pattern, _, _) in possibilities]\n        if patterns:\n            if args:\n                arg_msg = \"arguments '%s'\" % (args,)\n            elif kwargs:\n                arg_msg = \"keyword arguments '%s'\" % kwargs\n            else:\n                arg_msg = \"no arguments\"\n            msg = \"Reverse for '%s' with %s not found. %d pattern(s) tried: %s\" % (\n                lookup_view_s,\n                arg_msg,\n                len(patterns),\n                patterns,\n            )\n        else:\n            msg = (\n                \"Reverse for '%(view)s' not found. '%(view)s' is not \"\n                \"a valid view function or pattern name.\" % {\"view\": lookup_view_s}\n            )\n>       raise NoReverseMatch(msg)\nE       django.urls.exceptions.NoReverseMatch: Reverse for 'edit_book_modal' with arguments '(<MagicMock name='BookLoaderURL().create().__getitem__()' id='140173397966768'>,)' not found. 1 pattern(s) tried: ['modals/edit\\\\-book/(?P<book_id>[0-9]+)/\\\\Z']\n\n.venv/lib/python3.12/site-packages/django/urls/resolvers.py:831: NoReverseMatch\n\nDuring handling of the above exception, another exception occurred:\n\nmock_book_loader_url = <MagicMock name='BookLoaderURL' id='140173372983968'>\n\n    @allure.epic(\"Book import\")\n    @allure.feature(\"URL import: import_book view\")\n    @patch(\"lexiflux.views.import_views.BookLoaderURL\")\n    def test_import_book_from_url_with_aggressive_cleaning(mock_book_loader_url):\n        \"\"\"Test URL import with aggressive cleaning level.\"\"\"\n        request = MagicMock(spec=HttpRequest)\n        request.method = \"POST\"  # Add method attribute for require_POST decorator\n        request.user = MagicMock()\n        request.user.email = \"test@example.com\"\n        request.POST = {\n            \"importType\": \"url\",\n            \"url\": \"https://example.com/book\",\n            \"cleaning_level\": \"aggressive\",\n        }\n    \n        mock_book = MagicMock()\n        mock_book_instance = MagicMock()\n        mock_book_instance.create.return_value = mock_book\n        mock_book_loader_url.return_value = mock_book_instance\n    \n        with (\n            patch(\"lexiflux.views.library_views.render\"),\n            patch(\"lexiflux.decorators.login_required\", lambda f: f),\n        ):  # Bypass decorator\n>           import_book(request)\n\ntests/test_book_url_import.py:732: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nlexiflux/decorators.py:44: in wrapper\n    return login_required(view_func)(request, *args, **kwargs)\n.venv/lib/python3.12/site-packages/django/views/decorators/http.py:64: in inner\n    return func(request, *args, **kwargs)\nlexiflux/views/import_views.py:84: in import_book\n    return render(request, \"partials/import_modal.html\", context)\n.venv/lib/python3.12/site-packages/django/shortcuts.py:25: in render\n    content = loader.render_to_string(template_name, context, request, using=using)\n.venv/lib/python3.12/site-packages/django/template/loader.py:62: in render_to_string\n    return template.render(context, request)\n.venv/lib/python3.12/site-packages/django/template/backends/django.py:107: in render\n    return self.template.render(context)\n.venv/lib/python3.12/site-packages/django/template/base.py:171: in render\n    return self._render(context)\n.venv/lib/python3.12/site-packages/django/test/utils.py:114: in instrumented_test_render\n    return self.nodelist.render(context)\n.venv/lib/python3.12/site-packages/django/template/base.py:1016: in render\n    return SafeString(\"\".join([node.render_annotated(context) for node in self]))\n.venv/lib/python3.12/site-packages/django/template/base.py:977: in render_annotated\n    return self.render(context)\n.venv/lib/python3.12/site-packages/django/template/defaulttags.py:75: in render\n    if csrf_token:\n.venv/lib/python3.12/site-packages/django/utils/functional.py:251: in inner\n    self._setup()\n.venv/lib/python3.12/site-packages/django/utils/functional.py:404: in _setup\n    self._wrapped = self._setupfunc()\n.venv/lib/python3.12/site-packages/django/template/context_processors.py:24: in _get_val\n    token = get_token(request)\n.venv/lib/python3.12/site-packages/django/middleware/csrf.py:106: in get_token\n    if \"CSRF_COOKIE\" in request.META:\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <MagicMock spec='HttpRequest' id='140173372713888'>, name = 'META'\n\n    def __getattr__(self, name):\n        if name in {'_mock_methods', '_mock_unsafe'}:\n            raise AttributeError(name)\n        elif self._mock_methods is not None:\n            if name not in self._mock_methods or name in _all_magics:\n>               raise AttributeError(\"Mock object has no attribute %r\" % name)\nE               AttributeError: Mock object has no attribute 'META'\n\n/opt/hostedtoolcache/Python/3.12.11/x64/lib/python3.12/unittest/mock.py:660: AttributeError","steps":[],"attachments":[{"uid":"6cb7498c1c5a0486","name":"log","source":"6cb7498c1c5a0486.txt","type":"text/plain","size":2933},{"uid":"e6e23c4ac0d8b6f8","name":"stderr","source":"e6e23c4ac0d8b6f8.txt","type":"text/plain","size":2944}],"parameters":[],"shouldDisplayMessage":true,"attachmentsCount":2,"stepsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"mock_detect_language::0","time":{"start":1753849659800,"stop":1753849659800,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"monkeypatch::0","time":{"start":1753849659801,"stop":1753849659801,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_django_set_urlconf::0","time":{"start":1753849659802,"stop":1753849659802,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_live_server_helper::0","time":{"start":1753849659802,"stop":1753849659802,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_django_setup_unittest::0","time":{"start":1753849659805,"stop":1753849659805,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"use_non_threaded_server::0","time":{"start":1753849663653,"stop":1753849663653,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"django_test_environment::0","time":{"start":1753849663655,"stop":1753849663655,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false},{"name":"_fail_for_invalid_template_variable::0","time":{"start":1753849663657,"stop":1753849663657,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"attachmentsCount":0,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"URL import: import_book view"},{"name":"epic","value":"Book import"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_book_url_import"},{"name":"host","value":"pkrvmpptgkbjq6m"},{"name":"thread","value":"3761-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_book_url_import"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"history":{"statistic":{"failed":0,"broken":3,"skipped":0,"passed":74,"unknown":0,"total":77},"items":[{"uid":"b14a73531fd7f36d","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/736/index.html#testresult/b14a73531fd7f36d","status":"broken","statusDetails":"AttributeError: Mock object has no attribute 'META'","time":{"start":1753848267229,"stop":1753848267236,"duration":7}},{"uid":"692ee921e911de46","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/735/index.html#testresult/692ee921e911de46","status":"passed","time":{"start":1753772004904,"stop":1753772004911,"duration":7}},{"uid":"89d58a36072027f2","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/734/index.html#testresult/89d58a36072027f2","status":"passed","time":{"start":1753676281025,"stop":1753676281032,"duration":7}},{"uid":"9ef3a17a7ebd0f49","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/733/index.html#testresult/9ef3a17a7ebd0f49","status":"passed","time":{"start":1753623319553,"stop":1753623319559,"duration":6}},{"uid":"3ee2366d7e173c30","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/732/index.html#testresult/3ee2366d7e173c30","status":"passed","time":{"start":1753508768508,"stop":1753508768517,"duration":9}},{"uid":"417cb9d28e971e71","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/731/index.html#testresult/417cb9d28e971e71","status":"broken","statusDetails":"django.urls.exceptions.NoReverseMatch: Reverse for 'download_calibre_plugin' not found. 'download_calibre_plugin' is not a valid view function or pattern name.","time":{"start":1753369515398,"stop":1753369515404,"duration":6}},{"uid":"705afbe9ee815512","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/730/index.html#testresult/705afbe9ee815512","status":"passed","time":{"start":1750665609663,"stop":1750665609669,"duration":6}},{"uid":"226e26d9c2088bf5","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/729/index.html#testresult/226e26d9c2088bf5","status":"passed","time":{"start":1750588505658,"stop":1750588505665,"duration":7}},{"uid":"320e623ce238ba99","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/728/index.html#testresult/320e623ce238ba99","status":"passed","time":{"start":1750587882725,"stop":1750587882732,"duration":7}},{"uid":"274a5aa00694c070","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/727/index.html#testresult/274a5aa00694c070","status":"passed","time":{"start":1750518283914,"stop":1750518283921,"duration":7}},{"uid":"cb640eac443a2a7c","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/726/index.html#testresult/cb640eac443a2a7c","status":"passed","time":{"start":1750501039690,"stop":1750501039701,"duration":11}},{"uid":"9c0c8b43c0521e0d","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/725/index.html#testresult/9c0c8b43c0521e0d","status":"passed","time":{"start":1750499412846,"stop":1750499412853,"duration":7}},{"uid":"48d8d4d751fe0059","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/724/index.html#testresult/48d8d4d751fe0059","status":"passed","time":{"start":1750497326750,"stop":1750497326756,"duration":6}},{"uid":"1ba522241c7775a9","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/723/index.html#testresult/1ba522241c7775a9","status":"passed","time":{"start":1750047992142,"stop":1750047992150,"duration":8}},{"uid":"d4b41aaafe2aa5e4","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/722/index.html#testresult/d4b41aaafe2aa5e4","status":"passed","time":{"start":1750047485113,"stop":1750047485120,"duration":7}},{"uid":"19296f293596ef8f","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/721/index.html#testresult/19296f293596ef8f","status":"passed","time":{"start":1749974960962,"stop":1749974960969,"duration":7}},{"uid":"e44c7008972c7310","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/720/index.html#testresult/e44c7008972c7310","status":"passed","time":{"start":1749974106839,"stop":1749974106845,"duration":6}},{"uid":"5f0fc10517b14bc5","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/719/index.html#testresult/5f0fc10517b14bc5","status":"passed","time":{"start":1749971871138,"stop":1749971871145,"duration":7}},{"uid":"6304d0b401b71d5e","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/718/index.html#testresult/6304d0b401b71d5e","status":"passed","time":{"start":1749891864026,"stop":1749891864033,"duration":7}},{"uid":"d5a64fc31bd31e6c","reportUrl":"https://andgineer.github.io/lexiflux/builds/tests/717/index.html#testresult/d5a64fc31bd31e6c","status":"passed","time":{"start":1749890972290,"stop":1749890972297,"duration":7}}]},"tags":[]},"source":"4519dd182529a723.json","parameterValues":[]}